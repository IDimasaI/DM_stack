{"version":3,"file":"static/js/635.1991f58e.chunk.js","mappings":"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","sources":["router/App.tsx"],"sourcesContent":["import React, { useState,useEffect }  from 'react';\nimport axios from 'axios';\n\nfunction Region_all() {\n\ninterface Region_all_Type{\n  \n  \n}\n\n\n  const [constellations, setConstellations] = useState<Region_all_Type[]>([]);\n\n  useEffect(() => {\n    regions();\n  }, []);\n\n  \n  const regions = async () => {\n    try { \n        const response = await axios.get(\"https://cdn.jsdelivr.net/gh/IDimasaI/regions_and_IdConstellation@v2/regions.json\");\n        const result=response.data;\n        setConstellations(result)\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  function replaceSpace(text:string){\n    return text.replace(/\\s/g, \"_\");\n  }\n  return (\n    <div>\n      <h1>Просмотр всех регионов</h1>\n      <ol>\n        {!constellations.length && <li>Loading</li>}\n        {constellations.map((constellation,index) => (\n          <div key={index}>\n          {Object.keys(constellation).map((object:string) => (\n              <li key={index}>\n                <a href={'/Regions/'+replaceSpace(object)} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {object}\n                </a>\n             </li>\n            )\n          )}\n          </div>\n        ))}\n      </ol>\n    </div>\n  );\n}\n\n\n\nfunction Constellation_system() {\n  interface DataType {\n    name: string;\n    id: number;\n    \n\n    systems:any;\n    systems_count:number;\n    system_id:number;\n    constellations:number[];\n\n    total_kills_nps:number;\n    total_kills_ship:number;\n    total_kills_pod:number;\n    \n\n    matchedSystems: Record<string, number>;\n    npc_kills:number;\n    ship_kills:number;\n    pod_kills:number;\n\n  }\n  interface RegionDataType {\n    id: number;\n    name:string;\n  }\n  const [RegionData, setRegion] = useState<string>();\n  const [killsData, setKillsData] = useState<DataType[]>([]);\n  const [Count, setCount] = useState<number>(0);\n  const [constellations, setConstellations] = useState<DataType[]>([]);\n  const [systemsData, setSystemsData] = useState<DataType[]>([]);\n  const [typeSystem, setTypeSystem]=useState<number>(0);\n    useEffect(() => {\n      killData();\n    }, []);\n \n  useEffect(() => {\n    if (Count === 1) {\n      regions();\n    }\n  }, [Count]);\n\n  const killData = async () => {\n    try {\n      const response = await axios.get(`https://esi.evetech.net/latest/universe/system_kills`);\n      const data = response.data;\n      setKillsData(data);\n      setCount(1);\n      console.log(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const regions = async () => {\n    try {\n      const info = document.getElementById('info') as HTMLInputElement;\n      const response = await axios.get(\"https://cdn.jsdelivr.net/gh/IDimasaI/regions_and_IdConstellation@v2/regions.json\");\n  \n      const results = response.data.filter((item: { [key: string]: DataType }) => Object.keys(item)[0] === info.value);\n  \n      if (results.length > 0) {\n        results.forEach((result: { [key: string]: DataType }) => {\n          const regionArray=result[Object.keys(result)[0]]\n          setTypeSystem(regionArray.id);\n          const constellationsID = regionArray.constellations; \n          const nameRegion=regionArray.name\n          console.log('регион'); \n            get_constellations_and_systems_info(constellationsID);\n            setRegion(nameRegion);\n        });\n      } else {\n        console.log(\"Регион не найден\");\n      }\n  \n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const get_constellations_and_systems_info = async (constellations:number[]) => {\n    try {\n      const chunkSize = 10;\n      const chunks = [];\n\n      for (let i = 0; i < constellations.length; i += chunkSize) {\n        const chunk = constellations.slice(i, i + chunkSize);\n        chunks.push(chunk);\n      }\n\n      const results = [];\n      for (let i = 0; i < chunks.length; i++) {\n        const response = await axios.post(\"https://esi.evetech.net/latest/universe/names/?datasource=tranquility&language=ru\", '[' + chunks[i].join(\",\") + ']');\n        const constellationsData = response.data;\n\n        for (let j = 0; j < constellationsData.length; j++) {\n          const constellation = constellationsData[j];\n          const constellationID = constellation.id;\n\n          const response2 = await axios.get(`https://esi.evetech.net/latest/universe/constellations/${constellationID}`);\n          const systemsData = response2.data;\n\n          // Сопоставление ID систем в созвездии с килами\n          const matchedSystems:Record<string, number> = {};\n          \n          for (const key in killsData) {\n            const systemId = killsData[key].system_id;\n            if (systemsData.systems.includes(systemId)) {\n              matchedSystems[key] = systemId;\n            }\n          }\n\n          // Получение количества килов в созвездии\n          const killsDataObj:Record<number, DataType> = {};\n          for (const killData of killsData) {\n            killsDataObj[killData.system_id] = killData;\n          }\n\n          let totalKills_nps = 0;\n          let totalKills_ship = 0;\n          let totalKills_pod = 0;\n          for (const systemId of systemsData.systems) {\n            if (killsDataObj[systemId]) {\n              totalKills_nps += killsDataObj[systemId].npc_kills;\n              totalKills_ship += killsDataObj[systemId].ship_kills;\n              totalKills_pod += killsDataObj[systemId].pod_kills;\n            }\n          }\n\n          const result = {\n            ...constellation,\n            systems: systemsData.systems,\n            systems_count: systemsData.systems.length,\n            total_kills_nps: totalKills_nps,\n            total_kills_ship: totalKills_ship,\n            total_kills_pod: totalKills_pod,\n          };\n\n          results.push(result);\n        }\n      }\n\n      setConstellations(results);\n      console.log(results);\n      setCount(0);\n      \n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const Solars_systems = async (id:number[],typeSystem:number) => {\n    try {\n      \n      console.log(typeSystem);\n      const response = await axios.post(\"https://esi.evetech.net/latest/universe/names/?datasource=tranquility&language=ru\", id);\n      const results = response.data;\n      console.log(results);\n      return results;\n    } catch (error) {\n      console.error(error);\n      return null;\n    }\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await Promise.all(constellations.map(async (constellation) => {\n        const systems = await Solars_systems(constellation.systems,typeSystem);\n       \n  \n        const modifiedSystems = systems.map((system: { id: number; }) => {\n          const systemId = system.id;\n          const killsDataObj = killsData.find((killData) => killData.system_id === systemId);\n  \n          return {\n            ...system,\n            npc_kills: killsDataObj ? killsDataObj.npc_kills : 0,\n            ship_kills: killsDataObj ? killsDataObj.ship_kills : 0,\n            pod_kills: killsDataObj ? killsDataObj.pod_kills : 0\n          };\n        });\n  \n        return {\n          ...constellation,\n          systems: modifiedSystems,\n        };\n      }));\n      \n      if(typeof data==='object'&&data.length>0){\n        setSystemsData(data);\n        console.log('результат')\n        console.log(data)\n      }\n    };\n    fetchData();\n    \n  }, [constellations]);\n\n  function replaceSpace(text:string) {\n    return text.replace(/\\s/g, \"_\");\n  }\n\n  return (\n    <div>\n      <h2>Регион {RegionData}</h2>\n      <h1>Созвездия</h1>\n      <ul>\n        {constellations.length === 0 && <li>Loading</li>}\n        {systemsData.map((constellation, index) => (\n          <div key={index}>\n          <li >\n            {index + 1 + ') '} Созвездие:{\" \"}\n            <a href={\"/constellation/\" + replaceSpace(constellation.name)} target=\"_blank\" rel=\"noopener noreferrer\">\n              {constellation.name}\n            </a>{\" \"}\n            <ul>\n              {constellation.systems.map((system: DataType) => (\n                <div key={system.id}>\n                  <li>\n                    <a href={'/System/' + replaceSpace(system.name)} target=\"_blank\" rel=\"noopener noreferrer\">{system.name}</a>\n                  </li>\n                    <span>Убито npc: {system.npc_kills}, Убито кораблей {system.ship_kills}, Капсул {system.pod_kills} </span>\n                </div>\n              ))}\n            </ul>\n            Число систем: {constellation.systems_count},\n            Количество килов npc: {constellation.total_kills_nps},\n            Убито кораблей: {constellation.total_kills_ship},\n            капсул: {constellation.total_kills_pod}\n          </li>\n          <hr />\n          </div>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport  {Constellation_system,Region_all};\n"],"names":["Region_all","constellations","setConstellations","useState","useEffect","regions","async","result","axios","get","data","error","console","_jsxs","children","_jsx","length","map","constellation","index","Object","keys","object","href","text","replace","target","rel","Constellation_system","RegionData","setRegion","killsData","setKillsData","Count","setCount","systemsData","setSystemsData","typeSystem","setTypeSystem","killData","log","info","document","getElementById","results","filter","item","value","forEach","regionArray","id","constellationsID","nameRegion","name","get_constellations_and_systems_info","chunkSize","chunks","i","chunk","slice","push","constellationsData","post","join","j","constellationID","concat","matchedSystems","key","systemId","system_id","systems","includes","killsDataObj","totalKills_nps","totalKills_ship","totalKills_pod","npc_kills","ship_kills","pod_kills","systems_count","total_kills_nps","total_kills_ship","total_kills_pod","replaceSpace","Promise","all","Solars_systems","modifiedSystems","system","find","fetchData"],"sourceRoot":""}